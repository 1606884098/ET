<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--定义了该springboot的版本的所有其他jar的版本号，只要有版本号的jar，在添加依赖的时候就不用写版本号-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.et.www</groupId>
    <artifactId>root</artifactId>
    <version>1.0-SNAPSHOT</version>

    <packaging>pom</packaging>
    <name>et-root</name>
    <!--版本定义：继承此项目的jar版本定义都在这里，统一修改，统一使用-->
    <properties>
        <!--spring版本-->
        <springboot.version>2.2.2.RELEASE</springboot.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <mybatis.spring.boot.version>1.3.2</mybatis.spring.boot.version>
    </properties>
    <!--在Maven中dependencyManagement的作用其实相当于一个对所依赖jar包进行版本管理的管理器。-->
    <!--pom.xml文件中，jar的版本判断的两种途径：

    1.如果dependencies里的dependency自己没有声明version元素，那么maven就会到dependencyManagement里
    面去找有没有对该artifactId和groupId进行过版本声明，如果有，就继承它，如果没有就会报错，告诉你必
    须为dependency声明一个version

    2.如果dependencies中的dependency声明了version，那么无论dependencyManagement中有无对该jar的version
    声明，都以dependency里的version为准。-->

    <dependencyManagement>
        <!--这里的dependencies标签中申明的jar包不会真的去被下载，相当于对依赖包进行版本管理的管理器-->
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!-- 单独的dependencies标签（没有被dependencyManagement括起来）中申明的jar包：
    （1）如果显式的申明了版本，则下载对应版本的jar包；
    （2）如果没有申明版本，则根据dependencyManagement下的dependencies中对应jar包写明的版本进行下载；-->
    <dependencies>
        <!--这里定义的jar依赖，如果继承了这个项目，就不用再定义这个jar的依赖了 一般定义项目重复使用的jar-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>


    <!-- 这个插件，可以将应用打包成一个可执行的jar包；-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>